code,Unnamed: 0,title,pub_date,citations,abstract,class,year,abstract_processed,topic,class_topic,core,louvain,topiclouvain,GTcore
JP6239807B1,41,Method and system for behavior analysis of mobile device behavior based on user persona information ,2017-11-29,"['KR101720930B1', 'CN106575327B', 'US9747430B2', 'US10089459B2', 'US20190108353A1', 'CN107077551B', 'KR20160138982A', 'US9378390B2', 'US10735432B2', 'JP5976780B2', 'KR101810346B1', 'US10728270B2', 'US20190281076A1', 'US10304114B2', 'US9779236B2', 'KR20170015129A', 'US20180375869A1', 'CN105531712B', 'US9747440B2', 'KR102057565B1', 'CN104272787B', 'US9756066B2', 'US20170353817A1']","

 The computing device processor identifies behavioral techniques and machine learning techniques to identify, prevent, correct, or otherwise respond to malicious or performance degrading behavior of computing devices. It may consist of processor executable instructions for implementing the method used. As part of these actions, the processor generates user persona information that characterizes the user based on the user's activity, preferences, age, occupation, habit, mood, emotional state, personality, device usage pattern, etc. Can do. The processor dynamically determines the number of device features that are monitored or evaluated within the computing device and is most relevant to determining if the device behavior does not match the pattern of normal usage of the computing device by the user The persona information of the user can be used to identify the device behavior to do and to better identify or respond better to the non-benign behavior of the computing device.

",G06,2017,"

 the computing device processor identifies behavioral techniques and machine learning techniques to identify prevent correct or otherwise respond to malicious or performance degrading behavior of computing devices it may consist of processor executable instructions for implementing the method used as part of these actions the processor generates user persona information that characterizes the user based on the user's activity preferences age occupation habit mood emotional state personality device usage pattern etc can do the processor dynamically determines the number of device features that are monitored or evaluated within the computing device and is most relevant to determining if the device behavior does not match the pattern of normal usage of the computing device by the user the persona information of the user can be used to identify the device behavior to do and to better identify or respond better to the non-benign behavior of the computing device

",0,G06_0,2,5.0,5.0,5.0
US10104107B2,162,Methods and systems for behavior-specific actuation for real-time whitelisting ,2018-10-16,"['JP6140808B2', 'JP6188956B2', 'US9596257B2', 'CN105830080B', 'CN106133642B', 'US8584242B2', 'US9779236B2', 'WO2018086544A1', 'US9189624B2', 'CN106716382B', 'US9753796B2', 'CN107580699A', 'KR102057565B1', 'US10762206B2', 'EP3271860B1', 'US10783254B2', 'JP6161807B2', 'US9756066B2', 'US10742676B2']","
Various embodiments include methods of evaluating device behaviors in a computing device and enabling white listing of particular behaviors. Various embodiments may include monitoring activities of a software application operating on the computing device, and generating a behavior vector information structure that characterizes a first monitored activity of the software application. The behavior vector information structure may be applied to a machine learning classifier model to generate analysis results. The analysis results may be used to classify the first monitored activity of the software application as one of benign, suspicious, and non-benign. A prompt may be displayed to the user that requests that the user select whether to whitelist the software application in response to classifying the first monitored activity of the software application as suspicious or non-benign. The first monitored activity may be added to a whitelist of device behaviors in response to receiving a user input.
",G06,2018,"
various embodiments include methods of evaluating device behaviors in a computing device and enabling white listing of particular behaviors various embodiments may include monitoring activities of a software application operating on the computing device and generating a behavior vector information structure that characterizes a first monitored activity of the software application the behavior vector information structure may be applied to a machine learning classifier model to generate analysis results the analysis results may be used to classify the first monitored activity of the software application as one of benign suspicious and non-benign a prompt may be displayed to the user that requests that the user select whether to whitelist the software application in response to classifying the first monitored activity of the software application as suspicious or non-benign the first monitored activity may be added to a whitelist of device behaviors in response to receiving a user input
",0,G06_0,2,5.0,5.0,5.0
US9910984B2,164,Methods and systems for on-device high-granularity classification of device behaviors using multi-label models ,2018-03-06,"['US9779236B2', 'KR102160659B1', 'EP2836955B1', 'US9747440B2', 'KR102057565B1', 'CN105830080B', 'US10762206B2', 'EP3271860B1', 'US9189624B2', 'US20190318089A1', 'JP6161807B2', 'US9756066B2', 'CN106133642B', 'JP6188956B2', 'CN106716382B', 'US9753796B2', 'US10742676B2']","
Various aspects include methods and computing devices implementing the methods for evaluating device behaviors in the computing devices. Aspect methods may include using a behavior-based machine learning technique to classify a device behavior as one of benign, suspicious, and non-benign. Aspect methods may include using one of a multi-label classification and a meta-classification technique to sub-classify the device behavior into one or more sub-categories. Aspect methods may include determining a relative importance of the device behavior based on the sub-classification, and determining whether to perform robust behavior-based operations based on the determined relative importance of the device behavior.
",G06,2018,"
various aspects include methods and computing devices implementing the methods for evaluating device behaviors in the computing devices aspect methods may include using a behavior-based machine learning technique to classify a device behavior as one of benign suspicious and non-benign aspect methods may include using one of a multi-label classification and a meta-classification technique to sub-classify the device behavior into one or more sub-categories aspect methods may include determining a relative importance of the device behavior based on the sub-classification and determining whether to perform robust behavior-based operations based on the determined relative importance of the device behavior
",0,G06_0,2,5.0,5.0,5.0
US9330257B2,183,Adaptive observation of behavioral features on a mobile device ,2016-05-03,"['US10015178B2', 'US10397262B2', 'TWI606360B', 'EP3375159B1', 'CN105830080B', 'US10505991B1', 'JP6709845B2', 'US10419458B2', 'JP6161807B2', 'US10516686B2', 'US10097561B2', 'US10681060B2', 'US10341363B1', 'US20190068627A1', 'US20180041537A1']","
Methods, devices and systems for detecting suspicious or performance-degrading mobile device behaviors intelligently, dynamically, and/or adaptively determine computing device behaviors that are to be observed, the number of behaviors that are to be observed, and the level of detail or granularity at which the mobile device behaviors are to be observed. The various aspects efficiently identify suspicious or performance-degrading mobile device behaviors without requiring an excessive amount of processing, memory, or energy resources.
",G06,2016,"
methods devices and systems for detecting suspicious or performance-degrading mobile device behaviors intelligently dynamically and/or adaptively determine computing device behaviors that are to be observed the number of behaviors that are to be observed and the level of detail or granularity at which the mobile device behaviors are to be observed the various aspects efficiently identify suspicious or performance-degrading mobile device behaviors without requiring an excessive amount of processing memory or energy resources
",0,G06_0,2,5.0,5.0,5.0
US9158604B1,184,Lightweight data-flow tracker for realtime behavioral analysis using control flow ,2015-10-13,"['JP6235000B2', 'US20180300484A1', 'US20140201807A1', 'KR102057565B1', 'CN105830080B', 'US10762206B2', 'US10122747B2', 'US9813445B2', 'US10063585B2', 'JP6161807B2', 'US9438620B2', 'US9753796B2', 'US8584242B2']","
Methods and devices for detecting performance-degrading behaviors include identifying a data source component that inputs data into an application executing on a mobile device, and identifying a data sink component that consumes data output from the application. Using a measured runtime control-flow parameter, a likelihood that the data source component is a critical data resource may be determined. Using the probability value, a behavior model that identifies a mobile device feature associated with the critical data resource may be updated and used to determine whether the software application is malicious. Measured runtime control-flow parameters may include a program execution distance between data source and sink components based on heuristics. Determining program execution distances between data sources and sinks may include computing call graph distances by comparing a source call stack length and a sink call stack length, or by counting method invocations or functional calls between data sources and sinks.
",G06,2015,"
methods and devices for detecting performance-degrading behaviors include identifying a data source component that inputs data into an application executing on a mobile device and identifying a data sink component that consumes data output from the application using a measured runtime control-flow parameter a likelihood that the data source component is a critical data resource may be determined using the probability value a behavior model that identifies a mobile device feature associated with the critical data resource may be updated and used to determine whether the software application is malicious measured runtime control-flow parameters may include a program execution distance between data source and sink components based on heuristics determining program execution distances between data sources and sinks may include computing call graph distances by comparing a source call stack length and a sink call stack length or by counting method invocations or functional calls between data sources and sinks
",0,G06_0,2,5.0,5.0,5.0
US9774614B2,190,Methods and systems for side channel analysis detection and protection ,2017-09-26,"['US20190245894A1', 'EP2850864B1', 'US9747440B2', 'US10762206B2', 'EP3271860B1', 'CN104541293B', 'US9742559B2', 'US10783254B2', 'JP6161807B2', 'CN106133642B', 'CN106716382B', 'US9753796B2', 'US10742676B2', 'US20180041537A1']","
A computing device may use machine learning techniques to determine whether a side channel attack is underway and perform obfuscation operations (e.g., operations to raise the noise floor) or other similar operations to stop or prevent a detected side channel attack. The computing device may determine that a side channel attack is underway in response to determining that the computing device is in airplane mode, that the battery of the computing device the battery has been replaced with a stable DC power supply, that the touch-screen display of the computing device has been disconnected, that there are continuous calls to a cipher application programming interface (API) using the same cipher key, that there has been tampering with a behavioral analysis engine of the computing device, or any combination thereof.
",H04,2017,"
a computing device may use machine learning techniques to determine whether a side channel attack is underway and perform obfuscation operations (eg operations to raise the noise floor) or other similar operations to stop or prevent a detected side channel attack the computing device may determine that a side channel attack is underway in response to determining that the computing device is in airplane mode that the battery of the computing device the battery has been replaced with a stable dc power supply that the touch-screen display of the computing device has been disconnected that there are continuous calls to a cipher application programming interface (api) using the same cipher key that there has been tampering with a behavioral analysis engine of the computing device or any combination thereof
",0,H04_0,2,5.0,5.0,5.0
US10762206B2,243,Automated behavioral and static analysis using an instrumented sandbox and machine learning classification for mobile security ,2020-09-01,"['US20190245894A1', 'US10482260B1', 'US10104107B2', 'US10509910B2', 'US9940454B2', 'US20190363893A1', 'US10121000B1', 'US10516531B2', 'US10673902B2', 'US10225286B2', 'US10382459B2', 'US10079859B2', 'US10558800B2', 'AU2015380394B2', 'US9563749B2', 'US9582668B2', 'US10609059B2', 'US10817602B2', 'US10162970B2', 'US10102372B2']","
A method comprises, based on receiving a request to analyze at least a first mobile application, scheduling the request for a first sandbox. The first mobile application is analyzed based on the request, wherein the analysis of the first mobile application comprises performing a behavioral analysis of the first mobile application within the first sandbox and performing a static analysis of the first mobile application. A first feature vector is generated based on data resulting from the analysis of the first mobile application. The first mobile application is determined to comprise malware based, at least in part, on comparing the first feature vector with at least a second feature vector, wherein the second feature vector was generated based on at least one of a static analysis and a behavioral analysis of malware.
",G06,2020,"
a method comprises based on receiving a request to analyze at least a first mobile application scheduling the request for a first sandbox the first mobile application is analyzed based on the request wherein the analysis of the first mobile application comprises performing a behavioral analysis of the first mobile application within the first sandbox and performing a static analysis of the first mobile application a first feature vector is generated based on data resulting from the analysis of the first mobile application the first mobile application is determined to comprise malware based at least in part on comparing the first feature vector with at least a second feature vector wherein the second feature vector was generated based on at least one of a static analysis and a behavioral analysis of malware
",0,G06_0,2,9.0,95.0,5.0
US9756066B2,279,Secure behavior analysis over trusted execution environment ,2017-09-05,"['US9852292B2', 'US10333989B2', 'US10834061B2', 'US10089582B2', 'US10516682B2', 'US10516531B2', 'JP6650439B2', 'US9684775B2', 'KR101789962B1', 'EP3375159B1', 'US10038702B2', 'US9324034B2', 'US10681078B2', 'KR101848576B1', 'US10382459B2', 'US10558800B2', 'US9684870B2', 'US9740859B2', 'US8776180B2', 'US10817602B2', 'US20190349377A1', 'US9794270B2']","
Systems and methods for recognizing and reacting to malicious or performance-degrading behaviors in a mobile computing device include observing mobile device behaviors in an observer module within a privileged-normal portion of a secure operating environment to identify a suspicious mobile device behavior. The observer module may generate a behavior vector based on the observations, and provide the vector to an analyzer module in an unprivileged-secure portion of the secure operating environment. The vector may be analyzed in the unprivileged-secure portion to determine whether the mobile device behavior is benign, suspicious, malicious, or performance-degrading. If the behavior is found to be suspicious, operations of the observer module may be adjusted, such as to perform deeper observations. If the behavior is found to be malicious or performance-degrading behavior the user and/or a client module may be alerted in a secure, tamper-proof manner.
",H04,2017,"
systems and methods for recognizing and reacting to malicious or performance-degrading behaviors in a mobile computing device include observing mobile device behaviors in an observer module within a privileged-normal portion of a secure operating environment to identify a suspicious mobile device behavior the observer module may generate a behavior vector based on the observations and provide the vector to an analyzer module in an unprivileged-secure portion of the secure operating environment the vector may be analyzed in the unprivileged-secure portion to determine whether the mobile device behavior is benign suspicious malicious or performance-degrading if the behavior is found to be suspicious operations of the observer module may be adjusted such as to perform deeper observations if the behavior is found to be malicious or performance-degrading behavior the user and/or a client module may be alerted in a secure tamper-proof manner
",0,H04_0,2,9.0,5.0,5.0
US20190068627A1,281,Cloud based security monitoring using unsupervised pattern recognition and deep learning ,2019-02-28,"['US10853161B2', 'JP2019153330A', 'US10484378B2', 'US10447708B2', 'US10735196B2', 'US9923905B2', 'US10541988B2', 'US9785795B2', 'US20190014153A1', 'JP6474890B2', 'EP3198472B1', 'US10348759B2', 'US9740859B2', 'US9571512B2', 'JP6412943B2', 'US9350749B2', 'JP6687799B2', 'US9548994B2', 'US9667661B2', 'US20190007441A1', 'US10375026B2', 'EP3271860B1', 'US10719625B2', 'EP3195560B1', 'EP3183666B1']","
Provided are systems and methods for a cloud security system that learns patterns of user behavior and uses the patterns to detect anomalous behavior in a network. Techniques discussed herein include obtaining activity data from a service provider system. The activity data describes actions performed during use of a cloud service over a period of time. A pattern corresponding to a series of actions performed over a subset of time can be identified. The pattern can be added a model associated with the cloud service. The model represents usage of the cloud service by the one or more users. Additional activity data can be obtained from the service provider system. Using the model, a set of actions can be identified in the additional activity data that do not correspond to the model. The set of actions and an indicator that identifies the set of actions as anomalous can be output.
",H04,2019,"
provided are systems and methods for a cloud security system that learns patterns of user behavior and uses the patterns to detect anomalous behavior in a network techniques discussed herein include obtaining activity data from a service provider system the activity data describes actions performed during use of a cloud service over a period of time a pattern corresponding to a series of actions performed over a subset of time can be identified the pattern can be added a model associated with the cloud service the model represents usage of the cloud service by the one or more users additional activity data can be obtained from the service provider system using the model a set of actions can be identified in the additional activity data that do not correspond to the model the set of actions and an indicator that identifies the set of actions as anomalous can be output
",0,H04_0,2,5.0,5.0,5.0
US9747440B2,282,On-line behavioral analysis engine in mobile device with multiple analyzer model providers ,2017-08-29,"['US20190245894A1', 'US20190268302A1', 'US9940454B2', 'US20190363893A1', 'US9973517B2', 'US9098697B2', 'EP3375159B1', 'US10038702B2', 'US10270786B2', 'US9992228B2', 'US20180041537A1', 'US10701091B1', 'JP2017538186A', 'JP6239807B1', 'US9438613B1', 'US9740859B2', 'US9571512B2', 'US20180167402A1', 'US20160125184A1', 'US9967264B2', 'US10762206B2', 'US10742676B2']","
Methods, systems and devices for generating data models in a client-cloud communication system may include applying machine learning techniques to generate a first family of classifier models that describe a cloud corpus of behavior vectors. Such vectors may be analyzed to identify factors in the first family of classifier models that have the highest probability of enabling a mobile device to better determine whether a mobile device behavior is malicious or benign. Based on this analysis, a second family of classifier models may be generated that identify significantly fewer factors and data points as being relevant for enabling the mobile device to better determine whether the mobile device behavior is malicious or benign based on the determined factors. A mobile device classifier module based on the second family of classifier models may be generated and made available for download by mobile devices, including devices contributing behavior vectors.
",G06,2017,"
methods systems and devices for generating data models in a client-cloud communication system may include applying machine learning techniques to generate a first family of classifier models that describe a cloud corpus of behavior vectors such vectors may be analyzed to identify factors in the first family of classifier models that have the highest probability of enabling a mobile device to better determine whether a mobile device behavior is malicious or benign based on this analysis a second family of classifier models may be generated that identify significantly fewer factors and data points as being relevant for enabling the mobile device to better determine whether the mobile device behavior is malicious or benign based on the determined factors a mobile device classifier module based on the second family of classifier models may be generated and made available for download by mobile devices including devices contributing behavior vectors
",0,G06_0,2,9.0,5.0,5.0
CN104541293B,293,Framework for client cloud behavior analyzer ,2018-02-06,"['US10104107B2', 'JP6630276B2', 'US10740358B2', 'US10140441B2', 'EP2447809B1', 'US20140123289A1', 'US10893055B2', 'CN107077551B', 'CN104348829B', 'US9152787B2', 'US9607146B2', 'JP6227666B2', 'JP6732317B2', 'US10803408B2', 'US20170227995A1', 'US9213831B2', 'EP2801049B1', 'US9613476B2', 'EP3271860B1', 'US9448859B2', 'US9781106B1']","
For generating method, system and the equipment of data model in client cloud communication system, it can be included using machine learning techniques to generate the sorter model of the first family of the cloud corpus of description behavior vector.These vectors can be analyzed, to identify there is highest possibility mobile device is fatefully determined that mobile device behavior is malice or benign factor in the sorter model of the first family.Based on the analysis, based on identified factor, the sorter model of second family can be generated, the factor significantly reduced and data point are identified as with enabling the mobile device fatefully to determine that the mobile device behavior is malice or benign relevant by the sorter model of the second family.Can the sorter model based on the second family generate mobile device classifier modules, and make it can be used for being downloaded by mobile device, including to equipment that behavior vector contributes.
",G06,2018,"
for generating method system and the equipment of data model in client cloud communication system it can be included using machine learning techniques to generate the sorter model of the first family of the cloud corpus of description behavior vectorthese vectors can be analyzed to identify there is highest possibility mobile device is fatefully determined that mobile device behavior is malice or benign factor in the sorter model of the first familybased on the analysis based on identified factor the sorter model of second family can be generated the factor significantly reduced and data point are identified as with enabling the mobile device fatefully to determine that the mobile device behavior is malice or benign relevant by the sorter model of the second familycan the sorter model based on the second family generate mobile device classifier modules and make it can be used for being downloaded by mobile device including to equipment that behavior vector contributes
",0,G06_0,2,5.0,5.0,5.0
US9721212B2,367,Efficient on-device binary analysis for auto-generated behavioral models ,2017-08-01,"['US20170250994A1', 'US9104864B2', 'CN104303538B', 'US20190363893A1', 'US20180027006A1', 'US9998484B1', 'US9213729B2', 'US9781143B1', 'CN105830080B', 'US9330257B2', 'CN106133642B', 'JP2015153428A', 'KR20170015129A', 'CN106716382B', 'US20190068627A1', 'JP2020510926A', 'US8688601B2', 'KR102057565B1', 'US10762206B2', 'US10783254B2', 'US9756066B2', 'US10742676B2']","
Various aspects provide methods implemented by at least one processor executing on a mobile communication device to efficiently identify, classify, model, prevent, and/or correct the non-benign (e.g., performance degrading) conditions and/or behaviors that are related to an application operating on the device. Specifically, in various aspects, the mobile computing device may derive or extract application-specific features by performing a binary analysis of an application and may determine the application's category (e.g., a games, entertainment, or news category) based on the application-specific features. The mobile computing device may also obtain a classifier model associated with the application's category that includes various conditions, features, behaviors and corrective actions that may be used to quickly identify and correct non-benign behaviors (e.g., undesirable, malicious, and/or performance-degrading behaviors) occurring on the mobile computing device that are related to the application.
",G06,2017,"
various aspects provide methods implemented by at least one processor executing on a mobile communication device to efficiently identify classify model prevent and/or correct the non-benign (eg performance degrading) conditions and/or behaviors that are related to an application operating on the device specifically in various aspects the mobile computing device may derive or extract application-specific features by performing a binary analysis of an application and may determine the application's category (eg a games entertainment or news category) based on the application-specific features the mobile computing device may also obtain a classifier model associated with the application's category that includes various conditions features behaviors and corrective actions that may be used to quickly identify and correct non-benign behaviors (eg undesirable malicious and/or performance-degrading behaviors) occurring on the mobile computing device that are related to the application
",0,G06_0,2,5.0,5.0,5.0
CN110119621B,375,"Attack defense method, system and defense device for abnormal system call ",2020-08-21,"['US10356107B1', 'US9563843B2', 'KR101826865B1', 'US10104107B2', 'CN104303538B', 'AU2017254815B2', 'US10248910B2', 'US10089582B2', 'US20160055335A1', 'US9043905B1', 'US20170024660A1', 'US20140279762A1', 'US9324034B2', 'KR101848576B1', 'US20160078362A1', 'US9774614B2', 'US9721212B2', 'US9910984B2', 'US20170046510A1', 'US20160078347A1', 'US20140187177A1']","
The invention relates to an attack defense method, a system and a defense device for abnormal system call, wherein the attack defense method comprises the following steps: when detecting that a program is executed, acquiring a system calling sequence from an operating system, and returning the system calling sequence to a server side; performing feature coding on the system calling sequence through a second encoder to obtain a corresponding second feature vector set, wherein the second encoder is constructed according to coding parameters of a first encoder in a self-coding and decoding module transmitted from a server; and comparing the second feature vectors in the feature space through a regression equation, and determining whether the system call sequence is normal system call according to the comparison result, wherein the regression equation is obtained by the server side performing regression equation operation on the first feature vector set and is transmitted. By implementing the technical scheme of the invention, the detection effectiveness of unseen malicious software can be effectively improved, and the operation resources can be effectively distributed and the hardware overhead cost can be reduced.
",G06,2020,"
the invention relates to an attack defense method a system and a defense device for abnormal system call wherein the attack defense method comprises the following steps: when detecting that a program is executed acquiring a system calling sequence from an operating system and returning the system calling sequence to a server side; performing feature coding on the system calling sequence through a second encoder to obtain a corresponding second feature vector set wherein the second encoder is constructed according to coding parameters of a first encoder in a self-coding and decoding module transmitted from a server; and comparing the second feature vectors in the feature space through a regression equation and determining whether the system call sequence is normal system call according to the comparison result wherein the regression equation is obtained by the server side performing regression equation operation on the first feature vector set and is transmitted by implementing the technical scheme of the invention the detection effectiveness of unseen malicious software can be effectively improved and the operation resources can be effectively distributed and the hardware overhead cost can be reduced
",0,G06_0,2,5.0,5.0,5.0
US9324034B2,380,On-device real-time behavior analyzer ,2016-04-26,"['US20180167402A1', 'CN105830081B', 'US9369476B2', 'US10045218B1', 'KR20140137003A', 'US9672355B2', 'CN104541293B', 'US20190245876A1', 'US10419458B2', 'EP2908495A1', 'KR101837923B1', 'US10728270B2', 'KR101626243B1', 'US9756066B2', 'US10742676B2', 'JP6050560B1']","
Methods, systems and devices for generating data models in a communication system may include applying machine learning techniques to generate a first family of classifier models using a boosted decision tree to describe a corpus of behavior vectors. Such behavior vectors may be used to compute a weight value for one or more nodes of the boosted decision tree. Classifier models factors having a high probably of determining whether a mobile device behavior is benign or not benign based on the computed weight values may be identified. Computing weight values for boosted decision tree nodes may include computing an exclusive answer ratio for generated boosted decision tree nodes. The identified factors may be applied to the corpus of behavior vectors to generate a second family of classifier models identifying fewer factors and data points relevant for enabling the mobile device to determine whether a behavior is benign or not benign.
",G06,2016,"
methods systems and devices for generating data models in a communication system may include applying machine learning techniques to generate a first family of classifier models using a boosted decision tree to describe a corpus of behavior vectors such behavior vectors may be used to compute a weight value for one or more nodes of the boosted decision tree classifier models factors having a high probably of determining whether a mobile device behavior is benign or not benign based on the computed weight values may be identified computing weight values for boosted decision tree nodes may include computing an exclusive answer ratio for generated boosted decision tree nodes the identified factors may be applied to the corpus of behavior vectors to generate a second family of classifier models identifying fewer factors and data points relevant for enabling the mobile device to determine whether a behavior is benign or not benign
",0,G06_0,2,5.0,5.0,5.0
US20170046510A1,382,Methods and Systems of Building Classifier Models in Computing Devices ,2017-02-16,"['EP3080741A2', 'AU2016204068B2', 'US9779236B2', 'CN105590055B', 'KR20170015129A', 'JP2020510926A', 'US9369476B2', 'KR102057565B1', 'CN104541293B', 'US9742559B2', 'US10122747B2', 'US10419458B2', 'KR101626243B1', 'US9756066B2', 'CN106133642B', 'CN106716382B', 'US9753796B2', 'US20190068627A1']","
Methods, and computing devices implementing the methods, use application-based classifier models to improve the efficiency and performance of a comprehensive behavioral monitoring and analysis system predicting whether a software application is causing undesirable or performance depredating behavior. The application-based classifier models may include a reduced and more focused subset of the decision nodes that are included in a full or more complete classifier model that may be received or generated in the computing device. The application groups may be represented by application groups formed of computing device applications sharing related features, and may be generated using one or more clustering algorithms. Lean classifier models may be generated for each of the application group and may incorporate historical user input regarding execution permissions for features of applications within an application group.
",G06,2017,"
methods and computing devices implementing the methods use application-based classifier models to improve the efficiency and performance of a comprehensive behavioral monitoring and analysis system predicting whether a software application is causing undesirable or performance depredating behavior the application-based classifier models may include a reduced and more focused subset of the decision nodes that are included in a full or more complete classifier model that may be received or generated in the computing device the application groups may be represented by application groups formed of computing device applications sharing related features and may be generated using one or more clustering algorithms lean classifier models may be generated for each of the application group and may incorporate historical user input regarding execution permissions for features of applications within an application group
",0,G06_0,2,5.0,5.0,5.0
US9438620B2,406,Control flow graph representation and classification ,2016-09-06,"['US9147072B2', 'US10140451B2', 'EP3404948B1', 'US10176321B2', 'US10104107B2', 'US20200137097A1', 'US9686023B2', 'US10831893B2', 'US10762206B2', 'EP3191960B1', 'US10834124B2', 'US10121000B1', 'US9607146B2', 'US9189624B2', 'US10248910B2', 'US9756066B2', 'US9774614B2', 'US20190297096A1']","
A software sample is identified that includes code and a control flow graph is generated for each of a plurality of functions included in the sample. Features are identified in each of the functions that correspond to instances of a set of control flow fragment types. A feature set is generated for the sample from the identified features.
",H04,2016,"
a software sample is identified that includes code and a control flow graph is generated for each of a plurality of functions included in the sample features are identified in each of the functions that correspond to instances of a set of control flow fragment types a feature set is generated for the sample from the identified features
",0,H04_0,2,5.0,95.0,5.0
US10783254B2,669,Systems and methods for risk rating framework for mobile applications ,2020-09-22,"['US10148667B2', 'US20190245894A1', 'US10114950B2', 'US9411965B2', 'US9686023B2', 'US9721212B2', 'US10762206B2', 'JP6014286B2', 'US20190311134A1', 'US9357397B2', 'EP2756437B1', 'US20190363893A1', 'US9621570B2', 'US9158604B1', 'US9753796B2', 'US10742676B2', 'US9596257B2', 'US20180041537A1']","
Systems, methods and computer readable medium for training a risk rating system for assessing a risk of a mobile application are disclosed. One or more features representing operational characteristics of mobile applications and malware are extracted. A first learning classifier and a second learning classifier are trained using the extracted features. A machine learning risk rating model is generated, based on the combination of the first learning classifier and the second learning classifier to calculate a risk rating based on the features and a correlation of the features. Systems, methods, and computer readable medium for assessing a risk for a mobile application are also disclosed. One or more features of a mobile application are extracted. A learning classifier is applied to the extracted features. A risk rating is determined based on the result of the classifier.
",G06,2020,"
systems methods and computer readable medium for training a risk rating system for assessing a risk of a mobile application are disclosed one or more features representing operational characteristics of mobile applications and malware are extracted a first learning classifier and a second learning classifier are trained using the extracted features a machine learning risk rating model is generated based on the combination of the first learning classifier and the second learning classifier to calculate a risk rating based on the features and a correlation of the features systems methods and computer readable medium for assessing a risk for a mobile application are also disclosed one or more features of a mobile application are extracted a learning classifier is applied to the extracted features a risk rating is determined based on the result of the classifier
",0,G06_0,2,5.0,5.0,5.0
US10045218B1,693,Anomaly detection in streaming telephone network data ,2018-08-07,"['US9774614B2', 'US20180025157A1', 'JP2015153428A', 'EP3731166A1', 'US10367841B2', 'WO2016182668A1', 'EP2945091B1', 'US8560471B2', 'US9910984B2', 'US20200304522A1', 'US9838403B2', 'US9324034B2', 'US9357397B2', 'US10742676B2', 'US9652362B2']","
In one example, a method includes receiving a feature vector that characterizes a call history for a telephone network subscriber, wherein the feature vector comprises respective categorical values for one or more categorical features and respective continuous values for one or more continuous features, and applying, to the categorical values, a first algorithm to determine a categorical score for the feature vector. The example method further includes applying, to the continuous values, an isolation forest algorithm to determine a continuous score for the feature vector, and outputting, in response to determining at least one of the categorical score for the feature vector and the continuous score for the feature vector indicate the feature vector is anomalous, an indication that the feature vector is anomalous.
",H04,2018,"
in one example a method includes receiving a feature vector that characterizes a call history for a telephone network subscriber wherein the feature vector comprises respective categorical values for one or more categorical features and respective continuous values for one or more continuous features and applying to the categorical values a first algorithm to determine a categorical score for the feature vector the example method further includes applying to the continuous values an isolation forest algorithm to determine a continuous score for the feature vector and outputting in response to determining at least one of the categorical score for the feature vector and the continuous score for the feature vector indicate the feature vector is anomalous an indication that the feature vector is anomalous
",0,H04_0,2,5.0,5.0,5.0
US9753796B2,698,"Distributed monitoring, evaluation, and response for multiple devices ",2017-09-05,"['US20190245894A1', 'US9344431B2', 'US9852292B2', 'US10482260B1', 'US10104107B2', 'US9411955B2', 'US20190392174A1', 'US10516682B2', 'US10516531B2', 'JP6227666B2', 'US10348771B2', 'US9609456B2', 'US10382459B2', 'US20180041537A1', 'JP2016181265A', 'US10063654B2', 'US10558800B2', 'EP3262815B1', 'US10348759B2', 'US9582668B2', 'US10657277B2', 'US9756066B2']","
Data is collected from a set of devices. The data is associated with the devices, mobile application programs (apps), web applications, users, or combinations of these. A norm is established using the collected data. The norm is compared with data collected from a particular device. If there is a deviation outside of a threshold deviation between the norm and the data collected from the particular device, a response is initiated.
",G06,2017,"
data is collected from a set of devices the data is associated with the devices mobile application programs (apps) web applications users or combinations of these a norm is established using the collected data the norm is compared with data collected from a particular device if there is a deviation outside of a threshold deviation between the norm and the data collected from the particular device a response is initiated
",0,G06_0,2,9.0,5.0,5.0
US10742676B2,699,Distributed monitoring and evaluation of multiple devices ,2020-08-11,"['US20190245894A1', 'US9344431B2', 'US9852292B2', 'US10482260B1', 'US10104107B2', 'US20190392174A1', 'US20190363893A1', 'US10516682B2', 'US20200322372A1', 'US10516531B2', 'JP6227666B2', 'US9330257B2', 'US10348771B2', 'US10382459B2', 'US20180041537A1', 'US10063654B2', 'US10558800B2', 'EP3262815B1', 'US10348759B2', 'US10509911B2', 'US10657277B2', 'US10817602B2', 'US20190349377A1', 'US9756066B2']","
Data is collected from a set of devices according to a data collection policy. The data is associated with device configuration, device state, or device behavior. A norm is established using the collected data. A different data collection policy is established based on the norm. Data is collected from a particular device according to the different data collection policy. The norm is compared to the data collected from the particular device. If there is a deviation outside of a threshold deviation between the norm and the data collected from the particular device, a message is transmitted to an administrator.
",H04,2020,"
data is collected from a set of devices according to a data collection policy the data is associated with device configuration device state or device behavior a norm is established using the collected data a different data collection policy is established based on the norm data is collected from a particular device according to the different data collection policy the norm is compared to the data collected from the particular device if there is a deviation outside of a threshold deviation between the norm and the data collected from the particular device a message is transmitted to an administrator
",0,H04_0,2,9.0,5.0,5.0
CN105531712B,703,The behavioural analysis based on data flow in mobile device ,2018-07-27,"['CN105229612B', 'US20170228603A1', 'JP6732317B2', 'JP6510610B2', 'US9609456B2', 'US9357397B2', 'CN104704472B', 'US8843346B2', 'CN105556482B', 'US9684870B2', 'US9652362B2', 'JP6050560B1', 'CN102859565B', 'US9613476B2', 'KR102057565B1', 'TWI530141B', 'CN107430660B', 'US9491187B2', 'US9756066B2', 'CN104221026B']","
Method, apparatus and system for detecting suspicious or deterioration performance mobile device behavior, the computing device behavior that intelligently, dynamically and/or adaptively determination will be observed, the behavior to be observed quantity and will be to details or granularity level that mobile device behavior is observed.Various aspects efficiently identify suspicious or deterioration performance mobile device behavior without excessive processing, memory or energy resource amount.
",G06,2018,"
method apparatus and system for detecting suspicious or deterioration performance mobile device behavior the computing device behavior that intelligently dynamically and/or adaptively determination will be observed the behavior to be observed quantity and will be to details or granularity level that mobile device behavior is observedvarious aspects efficiently identify suspicious or deterioration performance mobile device behavior without excessive processing memory or energy resource amount
",0,G06_0,2,5.0,5.0,5.0
US9357397B2,753,Methods and systems for detecting malware and attacks that target behavioral security mechanisms of a mobile device ,2016-05-31,"['EP2850524B1', 'US10701091B1', 'US20180025157A1', 'US20170134405A1', 'JP2017538186A', 'US9832214B2', 'US10025929B2', 'US9369476B2', 'US8607340B2', 'US20200014734A1', 'US9104864B2', 'US20200076804A1', 'US9210182B2', 'US20190363893A1', 'US10742676B2', 'US20180041537A1']","
A behavior-based security system of a computing device may be protected from non-benign behavior, malware, and cyber attacks by configuring the device to work in conjunction with another component (e.g., a server) to monitor the accuracy and performance of the security system, and determine whether the system is working correctly, efficiently, or as expected. This may be accomplished via the server generating artificial attack software, sending the generated artificial attack software to the mobile device to simulate non-benign behavior in the mobile device, such as a cyber attack, and determining whether the behavior-based security system of the mobile device responded adequately to the simulated non-benign behavior. The sever may send a dead-man signal to the mobile device in response to determining that the behavior-based security system of the mobile device did not respond adequately to the simulated non-benign behavior.
",H04,2016,"
a behavior-based security system of a computing device may be protected from non-benign behavior malware and cyber attacks by configuring the device to work in conjunction with another component (eg a server) to monitor the accuracy and performance of the security system and determine whether the system is working correctly efficiently or as expected this may be accomplished via the server generating artificial attack software sending the generated artificial attack software to the mobile device to simulate non-benign behavior in the mobile device such as a cyber attack and determining whether the behavior-based security system of the mobile device responded adequately to the simulated non-benign behavior the sever may send a dead-man signal to the mobile device in response to determining that the behavior-based security system of the mobile device did not respond adequately to the simulated non-benign behavior
",0,H04_0,2,5.0,5.0,5.0
KR20180013940A,788,Cross-module behavioral validation ,2018-02-07,"['KR20180044295A', 'US10104107B2', 'US9858525B2', 'US9323929B2', 'US9684775B2', 'US9690635B2', 'US9330257B2', 'US9609456B2', 'US9357397B2', 'US20140150100A1', 'CN102509039B', 'JP6239807B1', 'US9519775B2', 'US9189624B2', 'JP2018508071A', 'US9774614B2', 'CN106716382B', 'US10187415B2', 'EP3271860B1', 'US9448859B2', 'US9491187B2', 'US20170161478A1']","
Various aspects of systems, methods, and devices enable a method of cross-module behavior verification. A plurality of observer modules of the system may observe the behavior or behaviors of the observed modules of the system. Each of the observer modules may generate a behavioral representation based on the behavior or behavior of the observed module. Each observer module may apply the behavior representation to a suitable behavior classifier model for each observer module. The observer modules may aggregate the groupings of behaviors of the observed module as determined by each of the observer modules. Observer modules may determine whether the observed module is behaving abnormally based on the aggregated classification.

 

",G06,2018,"
various aspects of systems methods and devices enable a method of cross-module behavior verification a plurality of observer modules of the system may observe the behavior or behaviors of the observed modules of the system each of the observer modules may generate a behavioral representation based on the behavior or behavior of the observed module each observer module may apply the behavior representation to a suitable behavior classifier model for each observer module the observer modules may aggregate the groupings of behaviors of the observed module as determined by each of the observer modules observer modules may determine whether the observed module is behaving abnormally based on the aggregated classification

 

",0,G06_0,2,5.0,5.0,5.0
US9448859B2,790,Exploiting hot application programming interfaces (APIs) and action patterns for efficient storage of API logs on mobile devices for behavioral analysis ,2016-09-20,"['US10691824B2', 'US20180167402A1', 'US10657277B2', 'US9973517B2', 'CN104303538B', 'JP6239808B1', 'US9311480B2', 'US9787681B2', 'US10122747B2', 'US20130227641A1', 'JP2015508540A', 'US9438620B2', 'US9787718B2', 'CN106716382B', 'US9753796B2', 'US8584242B2', 'JP6320532B2', 'US9439077B2']","
Methods and devices for detecting suspicious or performance-degrading mobile device behaviors may include performing behavior monitoring and analysis operations to intelligently, dynamically, and/or adaptively determine the mobile device behaviors that are to be observed, the number of behaviors that are to be observed, and the level of detail or granularity at which the behaviors are to be observed. Such behavior monitoring and analysis operations may be performed continuously (or near continuously) in a mobile device without consuming an excessive amount of processing, memory, or energy resources of the mobile device by identifying hot application programming interfaces (APIs) and hot action patterns that are invoked or used most frequently by software applications of the mobile device and storing information regarding these hot APIs and hot action patterns separately and more efficiently.
",G06,2016,"
methods and devices for detecting suspicious or performance-degrading mobile device behaviors may include performing behavior monitoring and analysis operations to intelligently dynamically and/or adaptively determine the mobile device behaviors that are to be observed the number of behaviors that are to be observed and the level of detail or granularity at which the behaviors are to be observed such behavior monitoring and analysis operations may be performed continuously (or near continuously) in a mobile device without consuming an excessive amount of processing memory or energy resources of the mobile device by identifying hot application programming interfaces (apis) and hot action patterns that are invoked or used most frequently by software applications of the mobile device and storing information regarding these hot apis and hot action patterns separately and more efficiently
",0,G06_0,2,5.0,5.0,5.0
US9536072B2,841,Machine-learning behavioral analysis to detect device theft and unauthorized device usage ,2017-01-03,"['US10798113B2', 'KR102005110B1', 'US10104107B2', 'US20170293748A1', 'TWI530141B', 'US9448859B2', 'US10546113B2', 'US10089459B2', 'US9495537B2', 'US9690635B2', 'US9324034B2', 'US9357397B2', 'JP2017524172A', 'US9609456B2', 'US9455988B2', 'US20190327237A1', 'US10803408B2', 'US9652362B2']","
The disclosure relates to machine-learning behavioral analysis to detect device theft and unauthorized device usage. In particular, during a training phase, an electronic device may generate a local user profile that represents observed user-specific behaviors according to a centroid sequence, wherein the local user profile may be classified into a baseline profile model that represents aggregate behaviors associated with various users over time. Accordingly, during an authentication phase, the electronic device may generate a current user profile model comprising a centroid sequence re-expressing user-specific behaviors observed over an authentication interval, wherein the current user profile model may be compared to plural baseline profile models to identify the baseline profile model closest to the current user profile model. As such, an operator change may be detected where the baseline profile model closest to the current user profile model differs from the baseline profile model in which the electronic device has membership.
",G06,2017,"
the disclosure relates to machine-learning behavioral analysis to detect device theft and unauthorized device usage in particular during a training phase an electronic device may generate a local user profile that represents observed user-specific behaviors according to a centroid sequence wherein the local user profile may be classified into a baseline profile model that represents aggregate behaviors associated with various users over time accordingly during an authentication phase the electronic device may generate a current user profile model comprising a centroid sequence re-expressing user-specific behaviors observed over an authentication interval wherein the current user profile model may be compared to plural baseline profile models to identify the baseline profile model closest to the current user profile model as such an operator change may be detected where the baseline profile model closest to the current user profile model differs from the baseline profile model in which the electronic device has membership
",0,G06_0,2,5.0,5.0,5.0
CN103262087B,1136,With the irrelevant malware detection based on system action of signing ,2016-05-18,"['US10104107B2', 'US10834061B2', 'US9411955B2', 'US10073966B2', 'US10089459B2', 'US9940454B2', 'US9210182B2', 'JP6345271B2', 'US10248414B2', 'KR101928127B1', 'EP2447877B1', 'EP2850524B1', 'US10033748B1', 'US10908837B2', 'RU2571594C2', 'US20200050765A1', 'US9774614B2', 'US10003547B2', 'US10205744B2', 'US9686023B2', 'US9230107B2', 'US10783254B2', 'US9910984B2', 'US9756066B2', 'US10742676B2']","
Disclose for method, system and computer program with system action basis detection of malicious software. Current operation pattern-recognition for the treatment system that comprises one or more resources is contemplated at least one movable process. Taking described current operation pattern and described in be contemplated to the expected activity level of at least one movable process as described one or more resources for the treatment of system described in basic calculation. Determine the actual activity level of described multiple resources. If deviation detected between described expected activity level and described actual activity level, the source of inexpectancy activity be identified as to the potential cause of described deviation. Whether policy criteria is legal for determining described inexpectancy activity. If described inexpectancy activity is illegal, the described source of described inexpectancy activity is categorized as to Malware.
",G06,2016,"
disclose for method system and computer program with system action basis detection of malicious software current operation pattern-recognition for the treatment system that comprises one or more resources is contemplated at least one movable process taking described current operation pattern and described in be contemplated to the expected activity level of at least one movable process as described one or more resources for the treatment of system described in basic calculation determine the actual activity level of described multiple resources if deviation detected between described expected activity level and described actual activity level the source of inexpectancy activity be identified as to the potential cause of described deviation whether policy criteria is legal for determining described inexpectancy activity if described inexpectancy activity is illegal the described source of described inexpectancy activity is categorized as to malware
",0,G06_0,2,9.0,5.0,5.0
US9495537B2,1219,Adaptive observation of behavioral features on a mobile device ,2016-11-15,"['US9767013B1', 'EP2836955B1', 'KR20180080227A', 'US9438620B2', 'KR102057565B1', 'CN105830080B', 'CN104541293B', 'US9311480B2', 'US10038702B2', 'US9740859B2', 'CN104272786B', 'US9571512B2', 'US10681060B2', 'CN106716382B', 'US10742676B2', 'US20190068627A1']","
Methods, devices and systems for detecting suspicious or performance-degrading mobile device behaviors intelligently, dynamically, and/or adaptively determine computing device behaviors that are to be observed, the number of behaviors that are to be observed, and the level of detail or granularity at which the mobile device behaviors are to be observed. The various aspects efficiently identify suspicious or performance-degrading mobile device behaviors without requiring an excessive amount of processing, memory, or energy resources.
",G06,2016,"
methods devices and systems for detecting suspicious or performance-degrading mobile device behaviors intelligently dynamically and/or adaptively determine computing device behaviors that are to be observed the number of behaviors that are to be observed and the level of detail or granularity at which the mobile device behaviors are to be observed the various aspects efficiently identify suspicious or performance-degrading mobile device behaviors without requiring an excessive amount of processing memory or energy resources
",0,G06_0,2,5.0,5.0,5.0
US9147072B2,1243,Method and system for performing behavioral analysis operations in a mobile device based on application state ,2015-09-29,"['KR101720930B1', 'JP6140808B2', 'US9973517B2', 'US9378390B2', 'CN105830080B', 'US9438620B2', 'US8584242B2', 'CN104541293B', 'WO2018086544A1', 'CN105531712B', 'CN106716382B', 'US9753796B2', 'US20190068627A1', 'US10762206B2', 'CN104272787B', 'US10776463B2', 'JP6161807B2', 'WO2016054384A1', 'US10742676B2']","
Methods, systems and devices use operating system execution states while monitoring applications executing on a mobile device to perform comprehensive behavioral monitoring and analysis include configuring a mobile device to monitor an activity of a software application, generate a shadow feature value that identifies an operating system execution state of the software application during that activity, generate a behavior vector that associates the monitored activity with the shadow feature value, and determine whether the activity is malicious or benign based on the generated behavior vector, shadow feature value and/or operating system execution states. The mobile device may also be configured to intelligently determine whether the operating system execution state of a software application is relevant to determining whether any of the monitored mobile device behaviors are malicious or suspicious, and monitor only the operating system execution states of the software applications for which such determinations are relevant.
",G06,2015,"
methods systems and devices use operating system execution states while monitoring applications executing on a mobile device to perform comprehensive behavioral monitoring and analysis include configuring a mobile device to monitor an activity of a software application generate a shadow feature value that identifies an operating system execution state of the software application during that activity generate a behavior vector that associates the monitored activity with the shadow feature value and determine whether the activity is malicious or benign based on the generated behavior vector shadow feature value and/or operating system execution states the mobile device may also be configured to intelligently determine whether the operating system execution state of a software application is relevant to determining whether any of the monitored mobile device behaviors are malicious or suspicious and monitor only the operating system execution states of the software applications for which such determinations are relevant
",0,G06_0,2,5.0,5.0,5.0
KR101840156B1,1496,Methods and systems of generating application-specific models for the targeted protection of vital applications ,2018-03-19,"['CN103891242B', 'US20180025157A1', 'US9413781B2', 'US9378390B2', 'US10341363B1', 'US10547642B2', 'US9742559B2', 'US20150256423A1', 'US9189624B2', 'US9756066B2', 'US10742676B2', 'CN105531712B', 'CN106716382B', 'US9753796B2', 'US20180131711A1', 'US20190068627A1', 'US20180198812A1']","

 ,      ,                     .                 ,                 ,                    ,           .Methods, and computing devices implementing the methods improve the efficiency and performance of a comprehensive behavioral monitoring and analysis system that is configured to predict whether a software application is causing undesirable or impractical behavior. The behavior monitoring and analysis system generates a behavior vector featuring activities of the software application and determines whether the generated behavior vector includes distinct behaviors or behavioral cues identifying the software application as a trusted software application, May be configured to quickly and efficiently classify a particular software application as positive by classifying the software application as positive in response to determining that the acquired behavior vector includes a distinct behavior identifying the software application as a trusted software application .


 

",G06,2018,"

                                                                                             methods and computing devices implementing the methods improve the efficiency and performance of a comprehensive behavioral monitoring and analysis system that is configured to predict whether a software application is causing undesirable or impractical behavior the behavior monitoring and analysis system generates a behavior vector featuring activities of the software application and determines whether the generated behavior vector includes distinct behaviors or behavioral cues identifying the software application as a trusted software application may be configured to quickly and efficiently classify a particular software application as positive by classifying the software application as positive in response to determining that the acquired behavior vector includes a distinct behavior identifying the software application as a trusted software application 


 

",0,G06_0,2,9.0,5.0,5.0
CN104205111A,2404,Computing device to detect malware ,2014-12-10,"['US9147072B2', 'US9536072B2', 'US20170024660A1', 'US10104107B2', 'US9607146B2', 'JP6227666B2', 'US8479296B2', 'US10783254B2', 'US9910984B2', 'KR101848576B1', 'US9330257B2', 'US9324034B2', 'CN106133642B', 'CN106716382B', 'US10708288B2', 'US9998484B1']","
Disclosed is an apparatus and method for a computing device to determine if an application is malware. The computing device may include: a query logger to log the behavior of the application on the computing device to generate a log; a behavior analysis engine to analyze the log from the query logger to generate a behavior vector that characterizes the behavior of the application; and a classifier to classify the behavior vector for the application as benign or malware.
",H04,2014,"
disclosed is an apparatus and method for a computing device to determine if an application is malware the computing device may include: a query logger to log the behavior of the application on the computing device to generate a log; a behavior analysis engine to analyze the log from the query logger to generate a behavior vector that characterizes the behavior of the application; and a classifier to classify the behavior vector for the application as benign or malware
",0,H04_0,2,5.0,5.0,5.0
US20190260778A1,2980,Unsupervised spoofing detection from traffic data in mobile networks ,2019-08-22,"['US10038710B2', 'US10104107B2', 'US10248910B2', 'CN106796753B', 'US20170024660A1', 'US9330257B2', 'US9324034B2', 'US9639699B1', 'CN106133642B', 'US9357397B2', 'US20190260770A1', 'US20210014258A1', 'US9369479B2', 'US9712554B2', 'JP6239807B1', 'CN107209818B', 'EP2860937B1', 'KR102057565B1', 'US9910984B2', 'US20180268292A1']","
A method for detecting spoofing attacks from network traffic log data is presented. The method includes training a spoofing attack detector with the network traffic log data received from one or more mobile networks by extracting features that are relevant to spoofing attacks for training data, building a first set of vector representations for the network traffic log data, training an anomaly detection model by employing DAGMM, and obtaining learned parameters of DAGMM. The method includes testing the spoofing attack detector with the network traffic log data received from the one or more mobile networks by extracting features that are relevant to spoofing attacks for testing data, building a second set of vector representations for the network traffic log data, obtaining latent representations of the testing data, computing a z-score of the testing data, and creating a spoofing attack alert report listing traffic logs generating z-scores exceeding a predetermined threshold.
",H04,2019,"
a method for detecting spoofing attacks from network traffic log data is presented the method includes training a spoofing attack detector with the network traffic log data received from one or more mobile networks by extracting features that are relevant to spoofing attacks for training data building a first set of vector representations for the network traffic log data training an anomaly detection model by employing dagmm and obtaining learned parameters of dagmm the method includes testing the spoofing attack detector with the network traffic log data received from the one or more mobile networks by extracting features that are relevant to spoofing attacks for testing data building a second set of vector representations for the network traffic log data obtaining latent representations of the testing data computing a z-score of the testing data and creating a spoofing attack alert report listing traffic logs generating z-scores exceeding a predetermined threshold
",0,H04_0,2,5.0,5.0,5.0
US20180039779A1,3099,Predictive Behavioral Analysis for Malware Detection ,2018-02-08,"['US9813445B2', 'JP2015508540A', 'US10025929B2', 'US10147049B2', 'CN105830080B', 'US9438620B2', 'CN106133642B', 'US8584242B2', 'WO2018086544A1', 'US10122747B2', 'CN105531712B', 'CN106716382B', 'US9753796B2', 'US9747440B2', 'JP6110482B2', 'KR102057565B1', 'EP3271860B1', 'US9742559B2', 'US9756066B2']","
A computing device may be protected from non-benign behavior, malware, and cyber attacks by using a combination of predictive and real-time behavior-based analysis techniques. A computing device may be configured to identify anticipated behaviors of a software application before runtime, analyze the anticipated behaviors before runtime to generate static analysis results, commencing execution of the software application, analyze behaviors of the software application during runtime via a behavior-based analysis system, and control operations of the behavior-based analysis system based on the static analysis results.
",G06,2018,"
a computing device may be protected from non-benign behavior malware and cyber attacks by using a combination of predictive and real-time behavior-based analysis techniques a computing device may be configured to identify anticipated behaviors of a software application before runtime analyze the anticipated behaviors before runtime to generate static analysis results commencing execution of the software application analyze behaviors of the software application during runtime via a behavior-based analysis system and control operations of the behavior-based analysis system based on the static analysis results
",0,G06_0,2,9.0,5.0,5.0
US10681080B1,4269,System and method for assessing android applications malware risk ,2020-06-09,"['US10474817B2', 'US8782792B1', 'US10176321B2', 'US9594904B1', 'US20170161496A1', 'US20170024660A1', 'US10783254B2', 'US9448859B2', 'US10872151B1', 'US10516638B2', 'US9147072B2', 'US9158604B1', 'US10104107B2', 'US10834107B1', 'US8756432B1', 'US9684787B2', 'US9910984B2', 'KR101691719B1', 'US9781144B1', 'US8176559B2']","
A system and method for malware assessment of an unknown application file are provided. The system and method are particularly applicable to malware assessment for Android operating system based applications. The malware assessment increases the confidence in an assessment that an application is benign or malware.
",H04,2020,"
a system and method for malware assessment of an unknown application file are provided the system and method are particularly applicable to malware assessment for android operating system based applications the malware assessment increases the confidence in an assessment that an application is benign or malware
",0,H04_0,2,5.0,5.0,5.0
CN109684837A,6670,A kind of mobile application malware detection method and system towards electric power enterprise ,2019-04-26,"['US9898602B2', 'CN106133642B', 'US10412115B1', 'US20170286678A1', 'US20200014734A1', 'US9607146B2', 'US10762206B2', 'US10181033B2', 'US9495537B2', 'US9324034B2', 'US9703962B2', 'CN104541293B', 'CN105426760B', 'US20160006757A1', 'US20190068627A1', 'KR101848576B1', 'JP6650439B2', 'US10152594B2', 'TWI461952B', 'US9609456B2', 'JP6050560B1']","
A kind of mobile application malware detection method towards electric power enterprise characterized by comprising obtain software to be detected, and the source code that decompiling obtains the software under testing is carried out to the software under testingThe feature vector of the source code is extracted, and the feature vector of the source code is input to the support vector machines disaggregated model constructed in advance and is compared, determines whether the software to be detected is MalwareWherein, the svm classifier model includes: SVM classifier, and the SVM classifier is based on dual weight increment method and is iterated update.Technical solution of the present invention solves the classification learning that support vector machines is not suitable for great amount of samples, the present invention propose it is a kind of based on the SVM Incremental Learning Algorithm of double weighting functions to application sample carry out learning classification, this method can be under the premise of guaranteeing that application class precision does not decline, learning time is reduced to greatest extent, is improved learning efficiency.
",G06,2019,"
a kind of mobile application malware detection method towards electric power enterprise characterized by comprising obtain software to be detected and the source code that decompiling obtains the software under testing is carried out to the software under testingthe feature vector of the source code is extracted and the feature vector of the source code is input to the support vector machines disaggregated model constructed in advance and is compared determines whether the software to be detected is malwarewherein the svm classifier model includes: svm classifier and the svm classifier is based on dual weight increment method and is iterated updatetechnical solution of the present invention solves the classification learning that support vector machines is not suitable for great amount of samples the present invention propose it is a kind of based on the svm incremental learning algorithm of double weighting functions to application sample carry out learning classification this method can be under the premise of guaranteeing that application class precision does not decline learning time is reduced to greatest extent is improved learning efficiency
",0,G06_0,2,5.0,5.0,5.0
EP3751476A1,6830,A system to mitigate against adversarial samples for machine learning and artificial intelligence models ,2020-12-16,"['US9721212B2', 'US9787695B2', 'US9898602B2', 'US9686023B2', 'US9684775B2', 'JP6235681B2', 'US9760716B1', 'US9774614B2', 'KR101789962B1', 'US9948663B1', 'EP3077949B1', 'US9448859B2', 'JP6661768B2', 'US10776463B2', 'US10754845B2', 'US20150286500A1', 'US10104107B2', 'US10254936B2', 'US9767013B1', 'JP6239807B1', 'US9910984B2', 'US20180157638A1', 'JP6650439B2', 'US9330257B2', 'US20180299943A1']","
Embodiments of the disclosure disclose a system to mitigate against adversarial input samples for machine learning (ML)/artificial intelligence (AI) models. According to one embodiment, a system receives a query from a client for a ML service. The system calculates a similarity score for the query based on a number of prior queries received from the client, the similarity score representing a similarity between the received query and the prior queries. The system determines that the query is an adversarial query in response to determining that the similarity score is above a predetermined threshold.
",G06,2020,"
embodiments of the disclosure disclose a system to mitigate against adversarial input samples for machine learning (ml)/artificial intelligence (ai) models according to one embodiment a system receives a query from a client for a ml service the system calculates a similarity score for the query based on a number of prior queries received from the client the similarity score representing a similarity between the received query and the prior queries the system determines that the query is an adversarial query in response to determining that the similarity score is above a predetermined threshold
",0,G06_0,2,5.0,5.0,5.0
